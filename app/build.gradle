import com.android.build.api.dsl.ManagedVirtualDevice

plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'dagger.hilt.android.plugin'
    id 'kotlin-kapt'
}

apply from: '../testing.gradle'
apply from: '../dagger.gradle'

android {
    compileSdk rootProject.ext.compile_sdk

    defaultConfig {
        applicationId "com.devmanishpatole.latestmovies"
        minSdk rootProject.ext.min_sdk
        targetSdk rootProject.ext.compile_sdk
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }

        sourceSets {
            androidTest.java.srcDirs += ["${project(':core').projectDir}/src/androidTest/java"]
        }
    }

    testOptions {

        // Setup devices on which instrumentation tests have to run
        devices {
            pixel2 (ManagedVirtualDevice) {
                device = "Pixel 2"
                apiLevel = 29
                systemImageSource = "google"
                abi = "x86"
            }
            pixel5 (ManagedVirtualDevice) {
                device = "Pixel 5"
                apiLevel = 29
                systemImageSource = "google"
                abi = "x86_64"
            }
        }

        // Setup groups based on existing devices
        deviceGroups {
            sdk30And31 {
                targetDevices.addAll(devices.pixel5,devices.pixel2)
            }
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix '.debug'
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion compose_version
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
}

dependencies {
    implementation project(':core')
    implementation project(':network')
}